{"version":3,"sources":["interfaces.ts","PrecomputedMoves.ts","GameLogic.ts","components/Board.tsx","components/GameInfo.tsx","AI.ts","App.tsx","index.tsx"],"names":["PieceType","Color","directionOffsets","numSquaresToEdge","rookMoves","kingMoves","knightMoves","pawnCapturesWhite","pawnCapturesBlack","squareIndex","y","Math","floor","x","north","south","west","east","min","directionIndex","currentDirOffset","n","targetSquare","push","fromSquare","toSquare","legalKingMoves","forEach","kingMoveDelta","kingMoveSquare","kingMoveSquareY","kingMoveSquareX","max","abs","legalKnightJumps","knightJumpDelta","knightJumpSquare","knightJumpSquareY","knightJumpSquareX","tempPawnCapturesWhite","tempPawnCapturesBlack","generatePseudoLegalMoves","gameState","pseudoLegalMoves","pieces","boardState","map","piece","index","filter","color","currentPlayer","type","Rook","Bishop","Queen","Knight","King","canCastleShort","White","castlingRights","whiteShort","blackShort","canCastleLong","whiteLong","blackLong","Pawn","doubleMoveSquare","startingRank","captureSquare","generateLegalMoves","legalMoves","move","gameStateAfterMove","makeMove","opponentResponses","myKingSquare","indexOf","find","some","responseMove","newCurrentPlayer","newBoard","newCastlingRights","newEnPassantSquare","newHalfMoveClock","halfMoveClock","newFullMoves","fullMoves","movedPiece","isPawnMoveOrCapture","rookMove","isMoveCastling","rook","Black","enPassantSquare","evaluateMaterialAdvantage","side","materialAdvantage","piecePoints","Chessboard","styled","div","Square","props","row","isLight","isMarkedLegal","isMarkedLastMove","image","getImageForPiece","Board","lastMove","onMakeMove","useState","markedLegalMoveSquares","setMarkedLegalMoveSquares","boardTiles","key","onDragOver","e","onDrop","includes","draggable","onDragStart","onDragEnd","preventDefault","tilePos","currentTarget","style","opacity","dataTransfer","setData","toString","dragImage","Image","src","setDragImage","allLegalMoves","tilePosition","parseInt","getData","Wrapper","aside","GameInfo","fenString","pieceToSymbol","symbol","toUpperCase","rankIndex","emptySquares","fileIndex","length","String","fromCharCode","FENFromGameState","split","getNegamaxMove","positionCounter","negaMax","depth","Number","NEGATIVE_INFINITY","score","bestMovesWithScores","bestMoveScore","POSITIVE_INFINITY","startTime","Date","now","moveScore","timeDiff","console","log","random","main","App","fen","symbolToPiece","toLowerCase","fenArray","fenBoard","file","rank","isNaN","i","fenCastling","fenPassant","fileString","rankString","charCodeAt","fenHalfMove","fenFullMoves","gameStateFromFEN","setGameState","setLastMove","useEffect","computerMove","callMakeMove","computerMakeMove","newGameState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fa04d81.chunk.js","sourcesContent":["export enum PieceType {\r\n\tKing,\r\n\tQueen,\r\n\tRook,\r\n\tBishop,\r\n\tKnight,\r\n\tPawn,\r\n}\r\n\r\nexport enum Color {\r\n\tWhite,\r\n\tBlack,\r\n}\r\n\r\nexport interface Piece {\r\n\ttype: PieceType;\r\n\tcolor: Color;\r\n}\r\n\r\nexport interface Move {\r\n\tfromSquare: number;\r\n\ttoSquare: number;\r\n}\r\n\r\nexport interface CastlingRights {\r\n\twhiteShort: boolean;\r\n\twhiteLong: boolean;\r\n\tblackShort: boolean;\r\n\tblackLong: boolean;\r\n}\r\n\r\nexport interface GameState {\r\n\tboardState: (Piece | null)[];\r\n\tcurrentPlayer: Color;\r\n\tcastlingRights: CastlingRights;\r\n\tenPassantSquare: number | null;\r\n\thalfMoveClock: number;\r\n\tfullMoves: number;\r\n}\r\n","import { Move } from \"./interfaces\";\r\n\r\n// First 4 are orthogonal, last 4 are diagonals (N, S, W, E, NW, SE, NE, SW)\r\nconst directionOffsets = [8, -8, -1, 1, 7, -7, 9, -9];\r\n\r\nlet numSquaresToEdge: [number[]] = [[]];\r\n\r\nlet rookMoves: Move[] = [];\r\nlet kingMoves: [number[]] = [[]];\r\nlet knightMoves: [number[]] = [[]];\r\nlet pawnCapturesWhite: [number[]] = [[]];\r\nlet pawnCapturesBlack: [number[]] = [[]];\r\n\r\nfor (let squareIndex = 0; squareIndex < 64; squareIndex++) {\r\n\tlet y: number = Math.floor(squareIndex / 8);\r\n\tlet x: number = squareIndex - y * 8;\r\n\r\n\tlet north: number = 7 - y;\r\n\tlet south: number = y;\r\n\tlet west: number = x;\r\n\tlet east: number = 7 - x;\r\n\r\n\tnumSquaresToEdge[squareIndex] = [];\r\n\r\n\tnumSquaresToEdge[squareIndex][0] = north;\r\n\tnumSquaresToEdge[squareIndex][1] = south;\r\n\tnumSquaresToEdge[squareIndex][2] = west;\r\n\tnumSquaresToEdge[squareIndex][3] = east;\r\n\tnumSquaresToEdge[squareIndex][4] = Math.min(north, west);\r\n\tnumSquaresToEdge[squareIndex][5] = Math.min(south, east);\r\n\tnumSquaresToEdge[squareIndex][6] = Math.min(north, east);\r\n\tnumSquaresToEdge[squareIndex][7] = Math.min(south, west);\r\n\r\n\t// Rook moves\r\n\tfor (let directionIndex = 0; directionIndex < 4; directionIndex++) {\r\n\t\tlet currentDirOffset = directionOffsets[directionIndex];\r\n\t\tfor (let n = 0; n < numSquaresToEdge[squareIndex][directionIndex]; n++) {\r\n\t\t\tlet targetSquare = squareIndex + currentDirOffset * (n + 1);\r\n\t\t\trookMoves.push({ fromSquare: squareIndex, toSquare: targetSquare });\r\n\t\t}\r\n\t}\r\n\r\n\t// King moves\r\n\tlet legalKingMoves: number[] = [];\r\n\tdirectionOffsets.forEach((kingMoveDelta) => {\r\n\t\tlet kingMoveSquare: number = squareIndex + kingMoveDelta;\r\n\t\t// Check only moves within the bounds of the board\r\n\t\tif (kingMoveSquare >= 0 && kingMoveSquare < 64) {\r\n\t\t\tlet kingMoveSquareY = Math.floor(kingMoveSquare / 8);\r\n\t\t\tlet kingMoveSquareX = kingMoveSquare - kingMoveSquareY * 8;\r\n\t\t\t// Save only moves that didn't wrap around the board (where max move distance in any direction is 1)\r\n\t\t\tlet maxMoveDistance = Math.max(\r\n\t\t\t\tMath.abs(x - kingMoveSquareX),\r\n\t\t\t\tMath.abs(y - kingMoveSquareY)\r\n\t\t\t);\r\n\t\t\tif (maxMoveDistance === 1) {\r\n\t\t\t\tlegalKingMoves.push(kingMoveSquare);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tkingMoves[squareIndex] = legalKingMoves;\r\n\r\n\t// Knight moves\r\n\tconst allKnightJumps: number[] = [15, 17, -17, -15, 10, -6, 6, -10];\r\n\tlet legalKnightJumps: number[] = [];\r\n\tallKnightJumps.forEach((knightJumpDelta) => {\r\n\t\tlet knightJumpSquare = squareIndex + knightJumpDelta;\r\n\t\t// Check only moves within the bounds of the board\r\n\t\tif (knightJumpSquare >= 0 && knightJumpSquare < 64) {\r\n\t\t\tlet knightJumpSquareY = Math.floor(knightJumpSquare / 8);\r\n\t\t\tlet knightJumpSquareX = knightJumpSquare - knightJumpSquareY * 8;\r\n\t\t\t// Save only moves that didn't wrap around the board (where max move distance in any direction is 2)\r\n\t\t\tlet maxMoveDistance = Math.max(\r\n\t\t\t\tMath.abs(x - knightJumpSquareX),\r\n\t\t\t\tMath.abs(y - knightJumpSquareY)\r\n\t\t\t);\r\n\t\t\tif (maxMoveDistance === 2) {\r\n\t\t\t\tlegalKnightJumps.push(knightJumpSquare);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tknightMoves[squareIndex] = legalKnightJumps;\r\n\r\n\t// Pawn captures\r\n\t// Calculate legal pawn captures for white and black\r\n\tlet tempPawnCapturesWhite: number[] = [];\r\n\tlet tempPawnCapturesBlack: number[] = [];\r\n\tif (x > 0) {\r\n\t\tif (y < 7) {\r\n\t\t\ttempPawnCapturesWhite.push(squareIndex + 7);\r\n\t\t}\r\n\t\tif (y > 0) {\r\n\t\t\ttempPawnCapturesBlack.push(squareIndex - 9);\r\n\t\t}\r\n\t}\r\n\tif (x < 7) {\r\n\t\tif (y < 7) {\r\n\t\t\ttempPawnCapturesWhite.push(squareIndex + 9);\r\n\t\t}\r\n\t\tif (y > 0) {\r\n\t\t\ttempPawnCapturesBlack.push(squareIndex - 7);\r\n\t\t}\r\n\t}\r\n\r\n\tpawnCapturesWhite[squareIndex] = tempPawnCapturesWhite;\r\n\tpawnCapturesBlack[squareIndex] = tempPawnCapturesBlack;\r\n}\r\n\r\nexport {\r\n\tnumSquaresToEdge,\r\n\trookMoves,\r\n\tkingMoves,\r\n\tknightMoves,\r\n\tpawnCapturesBlack,\r\n\tpawnCapturesWhite,\r\n};\r\n","import {\r\n\tMove,\r\n\tPiece,\r\n\tColor,\r\n\tPieceType,\r\n\tCastlingRights,\r\n\tGameState,\r\n} from \"./interfaces\";\r\nimport {\r\n\tnumSquaresToEdge,\r\n\tkingMoves,\r\n\tknightMoves,\r\n\tpawnCapturesWhite,\r\n\tpawnCapturesBlack,\r\n} from \"./PrecomputedMoves\";\r\n\r\n/*\r\n\tGenerates moves without check detection\r\n\tReturns a list of all pesudo legal moves\r\n*/\r\nexport const generatePseudoLegalMoves = (gameState: GameState): Move[] => {\r\n\tlet pseudoLegalMoves: Move[] = [];\r\n\r\n\tlet pieces: [Piece | null, number][] = gameState.boardState.map(\r\n\t\t(piece, index) => [piece, index]\r\n\t);\r\n\tpieces = pieces.filter(\r\n\t\t([piece, index]) => piece?.color === gameState.currentPlayer\r\n\t);\r\n\r\n\t// First 4 are orthogonal, last 4 are diagonals (N, S, W, E, NW, SE, NE, SW)\r\n\tconst directionOffsets = [8, -8, -1, 1, 7, -7, 9, -9];\r\n\r\n\tpieces.forEach(([piece, squareIndex]) => {\r\n\t\tswitch (piece?.type) {\r\n\t\t\tcase PieceType.Rook: {\r\n\t\t\t\tfor (let directionIndex = 0; directionIndex < 4; directionIndex++) {\r\n\t\t\t\t\tlet currentDirOffset = directionOffsets[directionIndex];\r\n\t\t\t\t\tfor (\r\n\t\t\t\t\t\tlet n = 0;\r\n\t\t\t\t\t\tn < numSquaresToEdge[squareIndex][directionIndex];\r\n\t\t\t\t\t\tn++\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tlet targetSquare = squareIndex + currentDirOffset * (n + 1);\r\n\r\n\t\t\t\t\t\t// Blocked by friendly piece, so stop looking in this direction\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare]?.color ===\r\n\t\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: targetSquare,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Can caputure, so stop looking in this direction\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare] != null &&\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare]?.color !==\r\n\t\t\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase PieceType.Bishop: {\r\n\t\t\t\tfor (let directionIndex = 4; directionIndex < 8; directionIndex++) {\r\n\t\t\t\t\tlet currentDirOffset = directionOffsets[directionIndex];\r\n\t\t\t\t\tfor (\r\n\t\t\t\t\t\tlet n = 0;\r\n\t\t\t\t\t\tn < numSquaresToEdge[squareIndex][directionIndex];\r\n\t\t\t\t\t\tn++\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tlet targetSquare = squareIndex + currentDirOffset * (n + 1);\r\n\r\n\t\t\t\t\t\t// Blocked by friendly piece, so stop looking in this direction\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare]?.color ===\r\n\t\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: targetSquare,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Can caputure, so stop looking in this direction\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare] != null &&\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare]?.color !==\r\n\t\t\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase PieceType.Queen: {\r\n\t\t\t\tfor (let directionIndex = 0; directionIndex < 8; directionIndex++) {\r\n\t\t\t\t\tlet currentDirOffset = directionOffsets[directionIndex];\r\n\t\t\t\t\tfor (\r\n\t\t\t\t\t\tlet n = 0;\r\n\t\t\t\t\t\tn < numSquaresToEdge[squareIndex][directionIndex];\r\n\t\t\t\t\t\tn++\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tlet targetSquare = squareIndex + currentDirOffset * (n + 1);\r\n\r\n\t\t\t\t\t\t// Blocked by friendly piece, so stop looking in this direction\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare]?.color ===\r\n\t\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: targetSquare,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Can caputure, so stop looking in this direction\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare] != null &&\r\n\t\t\t\t\t\t\tgameState.boardState[targetSquare]?.color !==\r\n\t\t\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase PieceType.Knight: {\r\n\t\t\t\t// Find all knight moves from the piece's square\r\n\t\t\t\tlet allKnightMoves = knightMoves[squareIndex];\r\n\r\n\t\t\t\t// Filter out the moves that land on friendly pieces\r\n\t\t\t\tallKnightMoves.forEach((targetSquare) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tgameState.boardState[targetSquare]?.color !==\r\n\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: targetSquare,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase PieceType.King: {\r\n\t\t\t\t// Find all king moves from the piece's square\r\n\t\t\t\tlet allKingMoves = kingMoves[squareIndex];\r\n\r\n\t\t\t\t// Filter out the moves that land on friendly pieces\r\n\t\t\t\tallKingMoves.forEach((targetSquare) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tgameState.boardState[targetSquare]?.color !==\r\n\t\t\t\t\t\tgameState.currentPlayer\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: targetSquare,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Castling\r\n\t\t\t\tconst canCastleShort =\r\n\t\t\t\t\tgameState.currentPlayer === Color.White\r\n\t\t\t\t\t\t? gameState.castlingRights.whiteShort\r\n\t\t\t\t\t\t: gameState.castlingRights.blackShort;\r\n\r\n\t\t\t\tconst canCastleLong =\r\n\t\t\t\t\tgameState.currentPlayer === Color.White\r\n\t\t\t\t\t\t? gameState.castlingRights.whiteLong\r\n\t\t\t\t\t\t: gameState.castlingRights.blackLong;\r\n\r\n\t\t\t\tif (canCastleShort) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tgameState.boardState[squareIndex + 1] == null &&\r\n\t\t\t\t\t\tgameState.boardState[squareIndex + 2] == null\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: squareIndex + 2,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (canCastleLong) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tgameState.boardState[squareIndex - 1] == null &&\r\n\t\t\t\t\t\tgameState.boardState[squareIndex - 2] == null\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: squareIndex - 2,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase PieceType.Pawn: {\r\n\t\t\t\t// Single moves\r\n\t\t\t\tlet targetSquare =\r\n\t\t\t\t\tpiece.color === Color.White ? squareIndex + 8 : squareIndex - 8;\r\n\r\n\t\t\t\tif (targetSquare >= 0 && targetSquare < 64) {\r\n\t\t\t\t\tif (gameState.boardState[targetSquare] == null)\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: targetSquare,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Double first move\r\n\t\t\t\tlet doubleMoveSquare =\r\n\t\t\t\t\tpiece.color === Color.White ? squareIndex + 16 : squareIndex - 16;\r\n\t\t\t\tlet startingRank = piece.color === Color.White ? 1 : 6;\r\n\r\n\t\t\t\tif (Math.floor(squareIndex / 8) === startingRank) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tgameState.boardState[targetSquare] == null &&\r\n\t\t\t\t\t\tgameState.boardState[doubleMoveSquare] == null\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: doubleMoveSquare,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pawn captures\r\n\t\t\t\tlet pawnCaptures: number[] = [];\r\n\t\t\t\tif (piece.color === Color.White) {\r\n\t\t\t\t\tpawnCaptures = pawnCapturesWhite[squareIndex];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpawnCaptures = pawnCapturesBlack[squareIndex];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpawnCaptures.forEach((captureSquare) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tgameState.boardState[captureSquare]?.color !==\r\n\t\t\t\t\t\t\tgameState.currentPlayer &&\r\n\t\t\t\t\t\tgameState.boardState[captureSquare] != null\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tpseudoLegalMoves.push({\r\n\t\t\t\t\t\t\tfromSquare: squareIndex,\r\n\t\t\t\t\t\t\ttoSquare: captureSquare,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t});\r\n\r\n\treturn pseudoLegalMoves;\r\n};\r\n\r\n/*\r\n\tGenerates the moves with check detecion by generating pseudo legal moves and removing illegal moves\r\n\tReturns a list of all legal moves\r\n*/\r\nexport const generateLegalMoves = (gameState: GameState): Move[] => {\r\n\tlet legalMoves: Move[] = [];\r\n\tlet pseudoLegalMoves: Move[] = generatePseudoLegalMoves(gameState);\r\n\r\n\tpseudoLegalMoves.forEach((move) => {\r\n\t\tconst gameStateAfterMove = makeMove(gameState, move);\r\n\t\tconst opponentResponses = generatePseudoLegalMoves(gameStateAfterMove);\r\n\r\n\t\tlet myKingSquare = gameStateAfterMove.boardState.indexOf(\r\n\t\t\tgameStateAfterMove.boardState.find(\r\n\t\t\t\t(piece) =>\r\n\t\t\t\t\tpiece?.type === PieceType.King &&\r\n\t\t\t\t\tpiece?.color === gameState.currentPlayer\r\n\t\t\t) || null\r\n\t\t);\r\n\r\n\t\tif (\r\n\t\t\topponentResponses.some(\r\n\t\t\t\t(responseMove) => responseMove.toSquare === myKingSquare\r\n\t\t\t)\r\n\t\t) {\r\n\t\t} else {\r\n\t\t\tlegalMoves.push(move);\r\n\t\t}\r\n\t});\r\n\r\n\treturn legalMoves;\r\n};\r\n\r\n/*\r\n\tTakes a game state and a move\r\n\tReturns a modified game state based on the provied move\r\n*/\r\nexport const makeMove = (gameState: GameState, move: Move): GameState => {\r\n\tlet newBoard: (Piece | null)[] = [...gameState.boardState];\r\n\tlet newCastlingRights: CastlingRights = { ...gameState.castlingRights };\r\n\tlet newCurrentPlayer: Color;\r\n\tlet newEnPassantSquare: number | null = null;\r\n\tlet newHalfMoveClock: number = gameState.halfMoveClock;\r\n\tlet newFullMoves: number = gameState.fullMoves;\r\n\r\n\t// Change the board state\r\n\tlet movedPiece = newBoard[move.fromSquare];\r\n\tnewBoard[move.fromSquare] = null;\r\n\tnewBoard[move.toSquare] = movedPiece;\r\n\r\n\t// Check if move is pawn move or capture for the half move clock\r\n\tlet isPawnMoveOrCapture: boolean = false;\r\n\tif (gameState.boardState[move.toSquare] != null) {\r\n\t\tisPawnMoveOrCapture = true;\r\n\t}\r\n\r\n\t// Check for castling\r\n\tif (gameState.boardState[move.fromSquare]?.type === PieceType.King) {\r\n\t\t// Move the rook if castling\r\n\t\tlet rookMove: Move | undefined = isMoveCastling(move);\r\n\t\tif (rookMove) {\r\n\t\t\tlet rook = newBoard[rookMove.fromSquare];\r\n\t\t\tnewBoard[rookMove.fromSquare] = null;\r\n\t\t\tnewBoard[rookMove.toSquare] = rook;\r\n\t\t}\r\n\r\n\t\t// Remove castling rights if king has moved\r\n\t\tif (gameState.currentPlayer === Color.White) {\r\n\t\t\tnewCastlingRights.whiteShort = false;\r\n\t\t\tnewCastlingRights.whiteLong = false;\r\n\t\t} else {\r\n\t\t\tnewCastlingRights.blackShort = false;\r\n\t\t\tnewCastlingRights.blackLong = false;\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove castling rights if rook moved\r\n\tif (gameState.boardState[move.fromSquare]?.type === PieceType.Rook) {\r\n\t\tif (gameState.currentPlayer === Color.White) {\r\n\t\t\tif (move.fromSquare === 0) {\r\n\t\t\t\tnewCastlingRights.whiteLong = false;\r\n\t\t\t} else if (move.fromSquare === 7) {\r\n\t\t\t\tnewCastlingRights.whiteShort = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (move.fromSquare === 56) {\r\n\t\t\t\tnewCastlingRights.blackLong = false;\r\n\t\t\t} else if (move.fromSquare === 63) {\r\n\t\t\t\tnewCastlingRights.blackShort = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove castling rights if rook taken\r\n\tif (gameState.boardState[move.toSquare]?.type === PieceType.Rook) {\r\n\t\tif (gameState.boardState[move.toSquare]?.color === Color.White) {\r\n\t\t\tif (move.toSquare === 0) {\r\n\t\t\t\tnewCastlingRights.whiteLong = false;\r\n\t\t\t} else if (move.toSquare === 7) {\r\n\t\t\t\tnewCastlingRights.whiteShort = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (move.toSquare === 56) {\r\n\t\t\t\tnewCastlingRights.blackLong = false;\r\n\t\t\t} else if (move.toSquare === 63) {\r\n\t\t\t\tnewCastlingRights.blackShort = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Change current player\r\n\tif (gameState.currentPlayer === Color.White) {\r\n\t\tnewCurrentPlayer = Color.Black;\r\n\t} else {\r\n\t\tnewCurrentPlayer = Color.White;\r\n\t\t// If the move was black's increment the full move counter\r\n\t\tnewFullMoves++;\r\n\t}\r\n\r\n\t// Check for en passant opportunity (only if a pawn has moved twice this turn)\r\n\tif (gameState.boardState[move.fromSquare]?.type === PieceType.Pawn) {\r\n\t\tif (\r\n\t\t\tMath.abs(\r\n\t\t\t\tMath.floor(move.fromSquare / 8) - Math.floor(move.toSquare / 8)\r\n\t\t\t) === 2\r\n\t\t) {\r\n\t\t\tnewEnPassantSquare =\r\n\t\t\t\tmove.toSquare +\r\n\t\t\t\t8 *\r\n\t\t\t\t\t(gameState.boardState[move.fromSquare]?.color === Color.White\r\n\t\t\t\t\t\t? -1\r\n\t\t\t\t\t\t: 1);\r\n\t\t}\r\n\r\n\t\tisPawnMoveOrCapture = true;\r\n\t}\r\n\r\n\t// Increment the half move clock if the move wasnt pawn move or a capture\r\n\tif (isPawnMoveOrCapture === false) newHalfMoveClock++;\r\n\telse newHalfMoveClock = 0;\r\n\r\n\tlet newGameState: GameState = {\r\n\t\tboardState: newBoard,\r\n\t\tcastlingRights: newCastlingRights,\r\n\t\tcurrentPlayer: newCurrentPlayer,\r\n\t\tenPassantSquare: newEnPassantSquare,\r\n\t\thalfMoveClock: newHalfMoveClock,\r\n\t\tfullMoves: newFullMoves,\r\n\t};\r\n\r\n\treturn newGameState;\r\n};\r\n\r\n/* \r\n  Checks if the given move is castling\r\n  Returns the rook move for castling or undefined\r\n*/\r\nexport const isMoveCastling = (move: Move): Move | undefined => {\r\n\tif (move.toSquare === move.fromSquare + 2)\r\n\t\treturn {\r\n\t\t\tfromSquare: move.toSquare + 1,\r\n\t\t\ttoSquare: move.toSquare - 1,\r\n\t\t};\r\n\r\n\tif (move.toSquare === move.fromSquare - 2)\r\n\t\treturn {\r\n\t\t\tfromSquare: move.toSquare - 2,\r\n\t\t\ttoSquare: move.toSquare + 1,\r\n\t\t};\r\n\r\n\treturn undefined;\r\n};\r\n\r\n/*\r\n\tTransfors a FEN string into the GameState object\r\n*/\r\nexport const gameStateFromFEN = (fen: string): GameState => {\r\n\tlet newBoard: (Piece | null)[] = [];\r\n\tlet newCastlingRights: CastlingRights = {\r\n\t\twhiteShort: false,\r\n\t\twhiteLong: false,\r\n\t\tblackShort: false,\r\n\t\tblackLong: false,\r\n\t};\r\n\tlet newCurrentPlayer: Color;\r\n\tlet newEnPassantSquare: number | null = null;\r\n\tlet newHalfMoveClock: number;\r\n\tlet newFullMoves: number;\r\n\r\n\tconst symbolToPiece = (symbol: string): PieceType => {\r\n\t\tswitch (symbol.toLowerCase()) {\r\n\t\t\tcase \"p\":\r\n\t\t\t\treturn PieceType.Pawn;\r\n\t\t\tcase \"r\":\r\n\t\t\t\treturn PieceType.Rook;\r\n\t\t\tcase \"n\":\r\n\t\t\t\treturn PieceType.Knight;\r\n\t\t\tcase \"b\":\r\n\t\t\t\treturn PieceType.Bishop;\r\n\t\t\tcase \"q\":\r\n\t\t\t\treturn PieceType.Queen;\r\n\t\t\tcase \"k\":\r\n\t\t\t\treturn PieceType.King;\r\n\t\t\tdefault:\r\n\t\t\t\treturn PieceType.King;\r\n\t\t}\r\n\t};\r\n\r\n\tconst fenArray: string[] = fen.split(\" \");\r\n\r\n\t// Board representation\r\n\tlet fenBoard = fenArray[0];\r\n\tlet file = 0;\r\n\tlet rank = 7;\r\n\r\n\tfor (let symbol of fenBoard) {\r\n\t\tif (symbol === \"/\") {\r\n\t\t\tfile = 0;\r\n\t\t\trank--;\r\n\t\t} else {\r\n\t\t\tif (!isNaN(parseInt(symbol))) {\r\n\t\t\t\tfor (let i = 0; i < parseInt(symbol); i++)\r\n\t\t\t\t\tnewBoard[file + i + rank * 8] = null;\r\n\t\t\t\tfile += parseInt(symbol);\r\n\t\t\t} else {\r\n\t\t\t\tlet piece: Piece = {\r\n\t\t\t\t\ttype: symbolToPiece(symbol),\r\n\t\t\t\t\tcolor: symbol === symbol.toUpperCase() ? Color.White : Color.Black,\r\n\t\t\t\t};\r\n\t\t\t\tnewBoard[file + 8 * rank] = piece;\r\n\t\t\t\tfile++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Current player\r\n\tlet fenPlayer = fenArray[1];\r\n\r\n\tif (fenPlayer === \"w\") newCurrentPlayer = Color.White;\r\n\telse newCurrentPlayer = Color.Black;\r\n\r\n\t// Castling rights\r\n\tlet fenCastling = fenArray[2];\r\n\r\n\tif (fenCastling.includes(\"K\")) newCastlingRights.whiteShort = true;\r\n\tif (fenCastling.includes(\"Q\")) newCastlingRights.whiteLong = true;\r\n\tif (fenCastling.includes(\"k\")) newCastlingRights.blackShort = true;\r\n\tif (fenCastling.includes(\"q\")) newCastlingRights.blackLong = true;\r\n\r\n\t// En passant square\r\n\tlet fenPassant = fenArray[3];\r\n\r\n\tif (fenPassant !== \"-\") {\r\n\t\tlet fileString = fenPassant[0];\r\n\t\tlet rankString = fenPassant[1];\r\n\r\n\t\tnewEnPassantSquare =\r\n\t\t\tfileString.charCodeAt(0) - 65 + parseInt(rankString) * 8;\r\n\t}\r\n\r\n\t// Half move clock\r\n\tlet fenHalfMove = fenArray[4];\r\n\r\n\tnewHalfMoveClock = parseInt(fenHalfMove);\r\n\r\n\t// Full move clock\r\n\tlet fenFullMoves = fenArray[5];\r\n\r\n\tnewFullMoves = parseInt(fenFullMoves);\r\n\r\n\tlet newGameState: GameState = {\r\n\t\tboardState: newBoard,\r\n\t\tcastlingRights: newCastlingRights,\r\n\t\tcurrentPlayer: newCurrentPlayer,\r\n\t\tenPassantSquare: newEnPassantSquare,\r\n\t\thalfMoveClock: newHalfMoveClock,\r\n\t\tfullMoves: newFullMoves,\r\n\t};\r\n\r\n\treturn newGameState;\r\n};\r\n\r\n/*\r\n\tTransforms the game state into a FEN string\r\n*/\r\nexport const FENFromGameState = ({\r\n\tboardState,\r\n\tcurrentPlayer,\r\n\tcastlingRights,\r\n\tenPassantSquare,\r\n\thalfMoveClock,\r\n\tfullMoves,\r\n}: GameState): string => {\r\n\tlet fenString: string = \"\";\r\n\r\n\tconst pieceToSymbol = (piece: Piece | null): string => {\r\n\t\tlet symbol: string = \"\";\r\n\r\n\t\tif (piece == null) return symbol;\r\n\r\n\t\tswitch (piece.type) {\r\n\t\t\tcase PieceType.Pawn: {\r\n\t\t\t\tsymbol = \"p\";\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PieceType.Rook: {\r\n\t\t\t\tsymbol = \"r\";\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PieceType.Knight: {\r\n\t\t\t\tsymbol = \"n\";\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PieceType.Bishop: {\r\n\t\t\t\tsymbol = \"b\";\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PieceType.Queen: {\r\n\t\t\t\tsymbol = \"q\";\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PieceType.King: {\r\n\t\t\t\tsymbol = \"k\";\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (piece.color === Color.White) symbol = symbol.toUpperCase();\r\n\r\n\t\treturn symbol;\r\n\t};\r\n\r\n\tlet file = 0;\r\n\tlet rank = 7;\r\n\r\n\t// Board state\r\n\tfor (let rankIndex = rank; rankIndex >= 0; rankIndex--) {\r\n\t\tlet emptySquares = 0;\r\n\t\tfor (let fileIndex = file; fileIndex < 8; fileIndex++) {\r\n\t\t\tif (boardState[fileIndex + 8 * rankIndex] == null) {\r\n\t\t\t\temptySquares++;\r\n\t\t\t} else {\r\n\t\t\t\tif (emptySquares > 0) {\r\n\t\t\t\t\tfenString += emptySquares.toString();\r\n\t\t\t\t}\r\n\t\t\t\tfenString += pieceToSymbol(boardState[fileIndex + 8 * rankIndex]);\r\n\t\t\t\temptySquares = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (emptySquares > 0) {\r\n\t\t\tfenString += emptySquares.toString();\r\n\t\t}\r\n\r\n\t\tif (rankIndex !== 0) fenString += \"/\";\r\n\t}\r\n\r\n\tfenString += \" \";\r\n\r\n\t// Current player\r\n\tfenString += currentPlayer === Color.White ? \"w\" : \"b\";\r\n\r\n\tfenString += \" \";\r\n\r\n\t// Castling rights\r\n\tfenString += castlingRights.whiteShort ? \"K\" : \"\";\r\n\tfenString += castlingRights.whiteLong ? \"Q\" : \"\";\r\n\tfenString += castlingRights.blackShort ? \"k\" : \"\";\r\n\tfenString += castlingRights.blackLong ? \"q\" : \"\";\r\n\r\n\tif (fenString[fenString.length - 1] === \" \") {\r\n\t\tfenString += \"-\";\r\n\t}\r\n\r\n\tfenString += \" \";\r\n\r\n\t// En passant square\r\n\tif (enPassantSquare == null) fenString += \"-\";\r\n\telse {\r\n\t\tlet enPassantFile = String.fromCharCode(\r\n\t\t\tenPassantSquare - Math.floor(enPassantSquare / 8) * 8 + 65\r\n\t\t);\r\n\t\tlet enPassantRank = Math.floor(enPassantSquare / 8) + 1;\r\n\r\n\t\tfenString += enPassantFile + enPassantRank;\r\n\t}\r\n\r\n\tfenString += \" \";\r\n\r\n\t// Half moves since last capture or pawn move and full move counter\r\n\tfenString += halfMoveClock + \" \" + fullMoves;\r\n\r\n\treturn fenString;\r\n};\r\n\r\n/*\r\n\tEvaluates material advantage of the board state\r\n\tPositive value means white is winnin, negative means black is winning, zero is tied\r\n*/\r\nexport const evaluateMaterialAdvantage = (\r\n\tboardState: (Piece | null)[],\r\n\tside: Color\r\n): number => {\r\n\tlet materialAdvantage = 0;\r\n\r\n\tconst piecePoints = {\r\n\t\t[PieceType.Pawn]: 1,\r\n\t\t[PieceType.Bishop]: 3,\r\n\t\t[PieceType.Knight]: 3,\r\n\t\t[PieceType.Rook]: 5,\r\n\t\t[PieceType.Queen]: 9,\r\n\t\t[PieceType.King]: 900,\r\n\t};\r\n\r\n\tboardState.forEach((piece) => {\r\n\t\tif (piece) {\r\n\t\t\tmaterialAdvantage +=\r\n\t\t\t\tpiecePoints[piece.type] * (piece.color === Color.White ? 1 : -1);\r\n\t\t}\r\n\t});\r\n\r\n\treturn materialAdvantage * (side === Color.White ? 1 : -1);\r\n};\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from \"@emotion/react\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport { Piece, PieceType, Color, Move, GameState } from \"../interfaces\";\r\n\r\nimport { generateLegalMoves } from \"../GameLogic\";\r\n\r\ntype PropTypes = {\r\n\tgameState: GameState;\r\n\tlastMove: Move | null;\r\n\tonMakeMove: (move: Move) => void;\r\n};\r\n\r\nconst Board = ({ gameState, lastMove, onMakeMove }: PropTypes) => {\r\n\tconst [markedLegalMoveSquares, setMarkedLegalMoveSquares] = useState<\r\n\t\tnumber[]\r\n\t>([]);\r\n\r\n\tconst boardTiles: React.ReactNode = gameState.boardState.map(\r\n\t\t(piece, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Square\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tisLight={\r\n\t\t\t\t\t\t!(Math.floor(index / 8) % 2 !== 0\r\n\t\t\t\t\t\t\t? index % 2 !== 0\r\n\t\t\t\t\t\t\t: index % 2 === 0)\r\n\t\t\t\t\t}\r\n\t\t\t\t\trow={8 - Math.floor(index / 8)}\r\n\t\t\t\t\timage={getImageForPiece(piece)}\r\n\t\t\t\t\tonDragOver={(e) => onDragOver(e)}\r\n\t\t\t\t\tonDrop={(e) => onDrop(e, index)}\r\n\t\t\t\t\tisMarkedLegal={markedLegalMoveSquares.includes(index)}\r\n\t\t\t\t\tisMarkedLastMove={\r\n\t\t\t\t\t\tlastMove?.fromSquare === index || lastMove?.toSquare === index\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t{piece ? (\r\n\t\t\t\t\t\tpiece.color === gameState.currentPlayer ? (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t\t\tonDragStart={(e) =>\r\n\t\t\t\t\t\t\t\t\tonDragStart(e, index, getImageForPiece(piece))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tonDragEnd={(e) => onDragEnd(e)}\r\n\t\t\t\t\t\t\t></div>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<div></div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</Square>\r\n\t\t\t);\r\n\t\t}\r\n\t);\r\n\r\n\tconst onDragOver = (e: React.DragEvent) => {\r\n\t\te.preventDefault();\r\n\t};\r\n\r\n\tconst onDragStart = (e: React.DragEvent, tilePos: number, piece: string) => {\r\n\t\t(e.currentTarget as HTMLElement).style.opacity = \"0\";\r\n\t\te.dataTransfer.setData(\"tilePosition\", tilePos.toString());\r\n\t\tlet dragImage = new Image();\r\n\t\tdragImage.src = `chess-ai/images/${piece}.svg`;\r\n\r\n\t\te.dataTransfer.setDragImage(dragImage, 45, 45);\r\n\r\n\t\tlet allLegalMoves = generateLegalMoves(gameState);\r\n\r\n\t\tsetMarkedLegalMoveSquares(\r\n\t\t\tallLegalMoves\r\n\t\t\t\t.filter(({ fromSquare, toSquare }) => fromSquare === tilePos)\r\n\t\t\t\t.map(({ fromSquare, toSquare }) => toSquare)\r\n\t\t);\r\n\t};\r\n\r\n\tconst onDragEnd = (e: React.DragEvent) => {\r\n\t\t(e.currentTarget as HTMLElement).style.opacity = \"1\";\r\n\t\tsetMarkedLegalMoveSquares([]);\r\n\t};\r\n\r\n\tconst onDrop = (e: React.DragEvent, tilePosition: number) => {\r\n\t\tif (markedLegalMoveSquares.includes(tilePosition)) {\r\n\t\t\tlet move: Move = {\r\n\t\t\t\tfromSquare: parseInt(e.dataTransfer.getData(\"tilePosition\")),\r\n\t\t\t\ttoSquare: tilePosition,\r\n\t\t\t};\r\n\t\t\tonMakeMove(move);\r\n\t\t\tsetMarkedLegalMoveSquares([]);\r\n\t\t}\r\n\t};\r\n\r\n\treturn <Chessboard>{boardTiles}</Chessboard>;\r\n};\r\n\r\nconst Chessboard = styled.div`\r\n\twidth: 500px;\r\n\theight: 500px;\r\n\tbackground-color: green;\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(8, 1fr);\r\n\tgrid-template-rows: repeat(8, 1fr);\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n`;\r\n\r\ntype SquareProps = {\r\n\trow: number;\r\n\tisLight: boolean;\r\n\tisMarkedLegal: boolean;\r\n\tisMarkedLastMove: boolean;\r\n\timage: string;\r\n};\r\n\r\nconst Square = styled.div<SquareProps>`\r\n\tposition: relative;\r\n\tdisplay: grid;\r\n\tplace-items: center;\r\n\tgrid-row: ${(props) => props.row};\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: ${(props) => (props.isLight ? \"#f6edcd\" : \"#f0cf8e\")};\r\n\tcolor: black;\r\n\r\n\t::after {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\twidth: 85%;\r\n\t\theight: 85%;\r\n\t\tborder: 2px solid #5ca099;\r\n\t\topacity: ${(props) => (props.isMarkedLegal ? 1 : 0)};\r\n\t\tpointer-events: none;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\t::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground-color: #a8c8a6;\r\n\t\topacity: ${(props) => (props.isMarkedLastMove ? 0.9 : 0)};\r\n\t\tpointer-events: none;\r\n\t\tz-index: 0;\r\n\t}\r\n\r\n\tdiv {\r\n\t\twidth: 80%;\r\n\t\theight: 80%;\r\n\t\tbackground-image: ${(props) => `url(\"chess-ai/images/${props.image}.svg\")`};\r\n\t\tbackground-size: cover;\r\n\t\tz-index: 1;\r\n\t}\r\n`;\r\n\r\nconst getImageForPiece = (piece: Piece | null): string => {\r\n\tif (piece == null) return \"\";\r\n\tswitch (piece.type) {\r\n\t\tcase PieceType.King: {\r\n\t\t\tif (piece.color === Color.Black) return \"king_b\";\r\n\t\t\treturn \"king_w\";\r\n\t\t}\r\n\t\tcase PieceType.Queen: {\r\n\t\t\tif (piece.color === Color.Black) return \"queen_b\";\r\n\t\t\treturn \"queen_w\";\r\n\t\t}\r\n\t\tcase PieceType.Rook: {\r\n\t\t\tif (piece.color === Color.Black) return \"rook_b\";\r\n\t\t\treturn \"rook_w\";\r\n\t\t}\r\n\t\tcase PieceType.Bishop: {\r\n\t\t\tif (piece.color === Color.Black) return \"bishop_b\";\r\n\t\t\treturn \"bishop_w\";\r\n\t\t}\r\n\t\tcase PieceType.Knight: {\r\n\t\t\tif (piece.color === Color.Black) return \"knight_b\";\r\n\t\t\treturn \"knight_w\";\r\n\t\t}\r\n\t\tcase PieceType.Pawn: {\r\n\t\t\tif (piece.color === Color.Black) return \"pawn_b\";\r\n\t\t\treturn \"pawn_w\";\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn \"\";\r\n\t}\r\n};\r\n\r\nexport default Board;\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from \"@emotion/react\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport { GameState, Color } from \"../interfaces\";\r\n\r\nimport { FENFromGameState, evaluateMaterialAdvantage } from \"../GameLogic\";\r\n\r\ntype PropTypes = {\r\n\tgameState: GameState;\r\n};\r\n\r\nconst GameInfo = ({ gameState }: PropTypes) => {\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<p>\r\n\t\t\t\tCurrent player:{\" \"}\r\n\t\t\t\t{gameState.currentPlayer === Color.White ? \"white\" : \"black\"}\r\n\t\t\t</p>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Castling rights</h3>\r\n\t\t\t\t<h4>White</h4>\r\n\t\t\t\t<p>White king side: {gameState.castlingRights.whiteShort.toString()}</p>\r\n\t\t\t\t<p>White queen side: {gameState.castlingRights.whiteLong.toString()}</p>\r\n\t\t\t\t<h4>Black</h4>\r\n\t\t\t\t<p>Black king side: {gameState.castlingRights.blackShort.toString()}</p>\r\n\t\t\t\t<p>Black queen side: {gameState.castlingRights.blackLong.toString()}</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<p>En passant square: {FENFromGameState(gameState).split(\" \")[3]}</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<p>50 move rule counter: {gameState.halfMoveClock}</p>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<p>Full moves: {gameState.fullMoves}</p>\r\n\t\t\t</div>\r\n\t\t\t<p>\r\n\t\t\t\tMaterial advantage:{\" \"}\r\n\t\t\t\t{evaluateMaterialAdvantage(gameState.boardState, Color.White)}\r\n\t\t\t</p>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nconst Wrapper = styled.aside`\r\n\tpadding: 10px;\r\n\tbackground-color: rgba(0, 0, 0, 0.2);\r\n\r\n\tdiv {\r\n\t\tmargin: 10px 0;\r\n\t}\r\n`;\r\n\r\nexport default GameInfo;\r\n","import {\r\n\tgenerateLegalMoves,\r\n\tgeneratePseudoLegalMoves,\r\n\tevaluateMaterialAdvantage,\r\n\tmakeMove,\r\n} from \"./GameLogic\";\r\nimport { Move, GameState } from \"./interfaces\";\r\n\r\nexport const getRandomMove = (gameState: GameState) => {\r\n\tlet legalMoves = generateLegalMoves(gameState);\r\n\r\n\tconst randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\r\n\r\n\treturn randomMove;\r\n};\r\n\r\nexport const getNegamaxMove = (gameState: GameState): Move | undefined => {\r\n\tlet positionCounter: number = 0;\r\n\r\n\tconst negaMax = (gameState: GameState, depth: number): number => {\r\n\t\tpositionCounter++;\r\n\r\n\t\tif (depth === 0) {\r\n\t\t\treturn evaluateMaterialAdvantage(\r\n\t\t\t\tgameState.boardState,\r\n\t\t\t\tgameState.currentPlayer\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet max = Number.NEGATIVE_INFINITY;\r\n\t\tlet movesToEvaluate = generatePseudoLegalMoves(gameState);\r\n\t\tmovesToEvaluate.forEach((move) => {\r\n\t\t\tlet score = -negaMax(makeMove(gameState, move), depth - 1);\r\n\t\t\tif (score > max) max = score;\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t};\r\n\r\n\tlet bestMovesWithScores: { move: Move; score: number }[] = [];\r\n\tlet bestMoveScore: number = Number.POSITIVE_INFINITY;\r\n\tlet allLegalMoves: Move[] = generatePseudoLegalMoves(gameState);\r\n\r\n\tif (allLegalMoves.length === 0) {\r\n\t\tconsole.log(\"Game over\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet startTime: number, endTime: number;\r\n\tstartTime = Date.now();\r\n\r\n\t// Get the best move relative to all the previous moves evaluated\r\n\tallLegalMoves.forEach((move) => {\r\n\t\tlet moveScore = negaMax(makeMove(gameState, move), 3);\r\n\t\tif (moveScore <= bestMoveScore) {\r\n\t\t\tbestMoveScore = moveScore;\r\n\t\t\tbestMovesWithScores.push({\r\n\t\t\t\tmove: move,\r\n\t\t\t\tscore: moveScore,\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\t// Only keep the best moves\r\n\tbestMovesWithScores = bestMovesWithScores.filter(\r\n\t\t({ move, score }) => score === bestMoveScore\r\n\t);\r\n\r\n\tendTime = Date.now();\r\n\tlet timeDiff = endTime - startTime; //in ms\r\n\r\n\tconsole.log(\"Checking \" + positionCounter + \" moves\");\r\n\tconsole.log(\"That took \" + timeDiff + \"ms\");\r\n\r\n\tif (bestMovesWithScores.length === 0) return;\r\n\r\n\treturn bestMovesWithScores[\r\n\t\tMath.floor(Math.random() * bestMovesWithScores.length)\r\n\t].move;\r\n};\r\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useState, useEffect } from \"react\";\n\nimport Board from \"./components/Board\";\nimport GameInfo from \"./components/GameInfo\";\n\nimport { Color, Move, GameState } from \"./interfaces\";\nimport {\n\tmakeMove,\n\tgameStateFromFEN,\n\tevaluateMaterialAdvantage,\n\tFENFromGameState,\n} from \"./GameLogic\";\nimport { getNegamaxMove } from \"./AI\";\n\n//const startingFEN = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\nconst startingFEN =\n\t\"rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2 \";\n\nfunction App() {\n\tconst [gameState, setGameState] = useState<GameState>(\n\t\tgameStateFromFEN(startingFEN)\n\t);\n\tconst [lastMove, setLastMove] = useState<Move | null>(null);\n\n\tuseEffect(() => {\n\t\tconst computerMakeMove = () => {\n\t\t\tlet computerMove = getNegamaxMove(gameState);\n\t\t\tif (!computerMove) return;\n\t\t\tcallMakeMove(computerMove);\n\t\t};\n\n\t\tif (gameState.currentPlayer === Color.Black) {\n\t\t\tcomputerMakeMove();\n\t\t}\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [gameState]);\n\n\tconst callMakeMove = (move: Move) => {\n\t\tconst newGameState = makeMove(gameState, move);\n\t\tsetGameState(newGameState);\n\n\t\t// Set new last move\n\t\tsetLastMove(move);\n\t};\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<GameInfo gameState={gameState} />\n\t\t\t<Board\n\t\t\t\tgameState={gameState}\n\t\t\t\tlastMove={lastMove}\n\t\t\t\tonMakeMove={callMakeMove}\n\t\t\t/>\n\t\t</Wrapper>\n\t);\n}\n\nconst Wrapper = styled.main`\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 3fr 1fr;\n\tpadding: 40px;\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}